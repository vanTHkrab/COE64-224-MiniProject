generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model farm_datas {
  id Int @id @default(autoincrement())

  sensor_datasId Int          @unique
  sensor_data    sensor_datas @relation(fields: [sensor_datasId], references: [id], onDelete: Cascade)

  soil_compositionsId Int               @unique
  soil_composition    soil_compositions @relation(fields: [soil_compositionsId], references: [id], onDelete: Cascade)

  irrigation_fertilizationsId Int                       @unique
  irrigation_fertilization    irrigation_fertilizations @relation(fields: [irrigation_fertilizationsId], references: [id], onDelete: Cascade)

  crop_infosId Int        @unique
  crop_info    crop_infos @relation(fields: [crop_infosId], references: [id], onDelete: Cascade)

  geo_environmentalsId Int                @unique
  geo_environmental    geo_environmentals @relation(fields: [geo_environmentalsId], references: [id], onDelete: Cascade)

  @@map("farm_datas")
}

model growth_stages {
  growth_stage String       @unique
  plant_season String       @unique
  crop_infos   crop_infos[]

  @@id([growth_stage, plant_season])
  @@map("growth_stage")
}

model plantation_area_types {
  plantation_area   String              @unique
  soil_type         String              @unique
  soil_compositions soil_compositions[]
  crop_infos        crop_infos[]

  @@id([plantation_area, soil_type])
  @@map("plantation_area_types")
}

model sensor_datas {
  id                     Int      @id @default(autoincrement())
  timestamp              DateTime @default(now())
  temperature            Float?
  humidity               Float?
  ph                     Float?
  rainfall               Float?
  soil_moisture          Float?
  sunlight_exposure      Float?
  wind_speed             Float?
  co2_concentration      Float?
  frost_risk             Float?
  water_usage_efficiency Float?

  farm_data farm_datas?

  @@map("sensor_datas")
}

model soil_compositions {
  id             Int    @id @default(autoincrement())
  nitrogen       Int
  phosphorus     Int
  potassium      Int
  organic_matter Float?
  soil_type      String

  soil_types plantation_area_types @relation(fields: [soil_type], references: [soil_type], onDelete: Cascade, onUpdate: Cascade)
  farm_data  farm_datas?

  @@map("soil_compositions")
}

model irrigation_fertilizations {
  id                   Int    @id @default(autoincrement())
  irrigation_frequency Int?
  fertilizer_usage     Float?
  water_source_type    String

  farm_data farm_datas?

  @@map("irrigation_fertilizations")
}

model crop_infos {
  id              Int    @id @default(autoincrement())
  plant           String
  growth_stage    String
  plantation_area String
  pest_pressure   Float?
  crop_density    Float?

  growth_stage_rel    growth_stages         @relation(fields: [growth_stage], references: [growth_stage], onDelete: Cascade, onUpdate: Cascade)
  plantation_area_rel plantation_area_types @relation(fields: [plantation_area], references: [plantation_area], onDelete: Cascade, onUpdate: Cascade)
  farm_data           farm_datas?

  @@map("crop_infos")
}

model geo_environmentals {
  id                   Int    @id @default(autoincrement())
  urban_area_proximity Float?

  farm_data farm_datas?

  @@map("geo_environmentals")
}

model User {
  id            String          @id @unique @default(cuid())
  name          String?
  username      String?         @unique
  email         String?         @unique
  emailVerified DateTime?
  image         String?
  password      String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                       String  @id @unique @default(cuid())
  userId                   String  @unique
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?
  refresh_token_expires_in Int?
  user                     User?   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @unique @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}
